
=========================================================================
注意 => github => https://www.cnblogs.com/anayigeren/p/10177027.html => TortoiseGit
注意 => github => pull => fetch + merge => 拉取相当于 获取 + 合并
注意 => github => https://github.com/geeeeeeeeek/git-recipes/wiki => git手册
注意 => github => 多台机器联合调试时，需要及时同步，否则无法提交，需要用下面的方法处理；
注意 => github => git pull origin master --allow-unrelated-histories
注意 => github => https://www.cnblogs.com/zhaoqingqing/p/5151192.html
注意 => github => 直接通过 同步菜单，就能提取服务器上的最新版本，并更新覆盖到本地版本；
注意 => github => 通常都在master分支上进行操作 => 本地master => 远端master
注意 => 版本更新日志  => E:\GitHub\build\rpm_bin\version.txt
注意 => 旧日志参考位  => E:\GitHub\HaoYiYun\Document\进度日志.txt
注意 => 新日志参考位  => E:\GitHub\HaoYiYun\Document\Smart日志.txt
注意 => 思考日志存放  => E:\GitHub\HaoYiYun\Document\阿里云\思考日志.txt
注意 => Smart开发目录 => F:\obs-studio
注意 => Smart服务器端 => /weike/server
注意 => Smart网站位置 => /weike/smart
=========================================================================
注意 => Smart的代码修改放在PC端，MacBook用来测试；
注意 => 小程序，两台机器都可以进行调试；

未来版本需要完成的功能列表：
=========================================================================
1.（未完成）Smart的学生端，组播发送模式和组播接收模式都需要在学生端的系统配置里面修改；都需要微信扫码之后才能登录；
            另外，Smart里面针对CenterSession不能在登录后就自动断开，要保持长链接，目的是为了可以直接通过小程序来远程修改Smart终端，并能够立即起作用；
            比如：可以直接进行组播终端配置的修改；比如：直接通过小程序控制终端的本地点播功能等等操作；
2.（未完成）F:\电影\TrafficMonitor-1.77 => 里面可以提取有关 任务栏|配置|透明度 等等相关功能参考；
3.（已完成）MacBookPro-2011启动时按住Option键，可以进行安装选择，可以通过光盘安装Windows系统；
  （已完成）MacBookPro-2011删除了MacOS系统，安装单一的Win7_x86系统，总共只有120G硬盘；
4.（不处理）发现ClassIn的录像功能，主要针对屏幕录像，范围就是整个软件框定范围，这样可以完整重现上课过程；
  （不处理）发现ClassIn的录像功能，声音部分，主要录制麦克风+扬声器的声音，麦克风和扬声器混音之后的录音；
  （不处理）我们Smart录像是只能针对老师端录像，只有老师端才能完整重现上课过程，学生端录像只是摄像头录像；
  （不处理）因此，我们的系统不支持学生端录像，只支持老师端录像，老师端才是上课的完整过程；
  （不处理）如果，要在学生端模式下实现屏幕录制，就需要开启与老师端一样的操作，单独针对轨道2做混音，然后单独开启屏幕录像；
5.（已完成）MacBookPro驱动下载 => https://www.drvsky.com/sort/741_1.htm
6.（已完成）https://github.com/obsproject/obs-studio.git => clone时选择 递归 深度 1，才能把相关所有独立出去的模块都提取下来；
  （已完成）切换|检出 => 分支 => remotes/origin/master => 覆盖已存在的分支，就能提取服务器上的最新版本，并更新覆盖到本地版本；

2019.10.15 - 2019.10.31 - 重装上阵：
===============================================================================================
0.（已完成）https://blog.csdn.net/gengxt2003/article/details/79070741 => obs在2015下的编译参考文档；
  （已完成）当前使用的是23.2.2版本，cmake-gui当中新增QTDIR|DepsPath|RELEASE_CANDIDATE(23.2.2-rc1)，否则Configure无法通过；
1.（已完成）搁置了一个月，开始重新整理回顾当前改造的代码位置，重新走到改造的正轨上面来；
2.（已完成）基础改造完毕之后，新功能参考视频 => F:\电影\阔地教育案例集.mp4
3.（已完成）Smart的基础改造，以讲师端|学生端合并功能为主，不考虑第三方加载情况；
4.（已完成）Smart.sln => 相当于学生端；obs-studio.sln => 相当于老师端；
5.（已完成）Smart的讲师端，采用obs界面，Smart的学生端，需要自定义一个简单界面；
            Smart的学生端，界面使用，参考Screen的内容，自定义加载，分为左右两个界面；这样避免与讲师端主界面发生冲突；
6.（已完成）Smart的学生端，登录成功之后，需要加载 StudentWindow，而不是BasicWindow；
  （已完成）Smart的学生端，StudentWindow重新构造界面，界面的样子参考LoginWindow和之前学生端的样子，需要进一步的简化；
  （已完成）Smart的学生端，StudentWindow左侧窗口，默认自动加载一个摄像头，并自动显示音量；
  （已完成）Smart的学生端，初步界面设计 => E:\GitHub\HaoYiYun\Document\Smart\学生端-设计图副本.jpg
            默认窗口大小 1280 *720，如果分辨率达不到1280*720，直接进入全屏模式；
            需要把OBSApp里面的mainWindow全部替换成OBSMainWindow，StudentWindow从OBSMainWindow继承，并将两个窗口的接口进行统一处理；
  （已完成）Smart的学生端，需要完成标题栏的信息，标题栏分为两部分，一部分是网络状态信息(文字灰色)，一部分是房间信息(文字白色)，都采用直接绘制的方式；
  （已完成）先绘制登录房间标题栏，需要先计算文字长度，确定显示位置，再进行具体的显示操作；新增一个QLabel对象，专门绘制时钟，避免update时的闪烁问题；
  （已完成）放弃了QLabel绘制已开课时钟，虽然QLabel是局部更新，但是，需要手动移动到指定位置，最终还是采用直接的局部更新this->update(QRect)；
  （已完成）drawText => Y轴是由下往上的计数方式；
7.（已完成）Smart的学生端，参考Screen工程，默认查找第一个摄像头和第一个音频捕捉，自动加载，并显示在本地摄像头位置；
  （已完成）Smart的学生端，总共三个数据源 => 摄像头 + 音频麦克风 + 老师端播放 => 需要将这三个数据源按照obs规范加入obs体系当中；
  （已完成）Smart的学生端，为了简化，频道0当中，去掉了对transation的支持，直接挂载scene source场景数据源；
  （已完成）Smart的学生端，频道0 => 视频挂载顺序 => scene source => 下面挂载普通source => 本地摄像头捕获设备 + 老师端远程播放资源
  （已完成）Smart的学生端，频道3 => 音频挂载顺序 => wasapi_input_source => 麦克风音频捕获设备
  （已完成）Smart的学生端，重新理解有关预览窗口的意义，所有source都显示在预览窗口，每个source通过sceneitem显示在预览窗口里面；
  （已完成）Smart的学生端，走自己特定的场景配置，命名为 student.json，讲师端走默认的场景配置，命名为 default.json；
  （已完成）Smart的学生端，去掉API接口功能(支持lua51.dll)，新增obs_add_ignore_module，可以忽略指定模块；
  （已完成）astrcmpi是obs自己实现的与stricmp等价的函数接口方法；
8.（已完成）Smart的学生端，已经初步完成了本地摄像头的加载和显示，下面需要对显示界面窗口进行新的升级和处理；
  （已完成）Smart的学生端，需要修改主界面的窗口配置，主要是预览窗口，分为左右两个，左侧占比1/5，右侧占比4/5；
  （已完成）QT界面设计器里面的layoutStretch可以对当前水平布局或垂直布局里面的控件之间的占比进行固定调整，就能满足上面的需求；
  （已完成）最终绘制方案，没有采用上面的方式，而是直接创建窗口，移动位置的方式，简单快捷；这样就能跟自绘过程融合在一起；
  （已完成）由于预览窗口是由底层系统重绘，所以，必须取消透明背景参数 => Qt::WA_TranslucentBackground => initWindow() 当中；
  （已完成）发现 doDrawTimeClock() 过程也存在刷新过于频繁的问题，之前引入QLabel的目的就是为了减少刷新，但是实际发现没有降低刷新，反而增加了刷新次数；
  （已完成）而且，不是只刷新一次，而是多刷新了很多次；这里需要进行调整，降低刷新的频率，使用裁剪区域或其它方式；
  （已完成）最终采用直接this->update(QRect)，计算时钟字符串局部更新区域，局部更新也会触发其它绘制，但并不会显示，只有在指定区域的绘制才能显示出来；
9.（已完成）为了简化，需要将左右显示窗口进行必要的封装处理，左侧封装成CViewCamera，右侧封装成CViewTeacher，这样便于简化管理；
  （已完成）左侧视频输出分辨率就是摄像头的分辨率，需要从本地配置文件student.json当中写入或读取配置；
  （已完成）wasapi_input_source  => 挂在频道3上面 => obs_set_output_source(3, nullptr); => 自动触发释放
            scene => dshow_input => 挂在频道0上面 => obs_source_release | obs_sceneitem_remove => 通过引用计数器释放
            obs-smart\basic\scenes\student.json => 保存学生端scene相关的数据源列表
  （已完成）CStudentWindow::Load() => 既能创建默认的student.json，也能读取student.json
  （已完成）由于在信号事件当中进行了引用计数，需要在CreateDefaultScene当中减少引用计数，也就是读取student.json与创建student.json的处理工程有些差异；
10.（已完成）完成了摄像头的左侧显示，数据源的配置存盘，数据源的配置读取；下面进入摄像头数据的压缩|录像|上传操作；
   （已完成）由于是学生端，只有一个摄像头数据源，basic.ini这个配置需要调整，需要为学生端单独准备一个[Student]配置；
   （已完成）学生端，必须在有效获取到摄像头的分辨率之后，才能进行ResetVideo处理，然后，才能进行压缩处理，最后，进行推流操作；
   （已完成）学生端，参考讲师模式下的AdvanceOutput，新增studentEncoder.json配置文件，设置默认码流为512kbps
   （已完成）学生端，什么时候开始启动压缩模型？在获取到摄像头的尺寸或重置视频之后才能进行压缩输出操作；
   （已完成）学生端，已经完成了CStudentOutput的建立，并能自动在合适的时间点启动录像，存盘成mp4文件 => StartRecording()
   （已完成）学生端，需要利用CStudentOutput的推流接口，将目前的录像内容，直接推流给服务器 => StartStreaming()
   （已完成）学生端，需要将CCenterSession从Login窗口中转移到App对象，以便小程序后续能长期控制；
   （已完成）学生端，将推流启动过程与视频重置标志都整合到doCheckOutput()当中，这样可以避免混乱；
   （已完成）学生端，推流的启动不是手动控制，而是通过一个时钟每隔5秒进行检测；
   （已完成）学生端，采用了简化方法，OBSApp::onTriggerMiniSuccess()不要关闭，而是调用hide()，这样CLoginMini一直有效；
   （已完成）obs_output_update 是同步执行更新，obs_source_update 是异步执行更新；
   （已完成）学生端，简化推流信号量的处理，obs本身分为4个信号量，现在简化成2个；
             obs_output_begin_data_capture => start => OBSStreamStarting => 去掉
             obs_output_start => starting => OBSStartStreaming => 改造保留
             obs_output_stop => stopping => OBSStopStreaming => 改造保留
   （已完成）解决了摄像头分辨率变化时，需要统一操作的问题；只有获取到有效的摄像头分辨率之后，才能进行推流或录像；
   （已完成）当获取到摄像头分辨率时，就知道了与最初的系统设定是否一致，也能判断是否需要重置视频；
   （已完成）同时，重置视频，开始推流或录像，都是在远程连接成功之后这条线路上操作的，都是在timer当中操作；
11.（未完成）学生端，开始进行推流交互过程优化处理；
   （已完成）学生端，LiveID的创建思路 => 有服务器生成，返回给推流者；
   （不处理）学生端，不要在登录成功之后启动推流，而需要在老师端在线时才能推流，在doCheckOutput()还要增加一个检测限制；
   （已完成）讲师端，由于LiveID不是固定的，都是由服务器动态生成的，因此，在启动和退出的时候，都要自动删除所有的互动学生端数据源对象；
   （已完成）讲师端，只要学生端不在线，就要进行删除操作，否则就会不断增加空白的黑色窗口，造成整个界面的混乱排列，最核心还是LiveID不是固定的问题；
   （已完成）讲师端，学生端推流老师端回放过程，已完成，并测试延时在0.4秒左右；
   （未完成）讲师端，老师端推流学生端回放过程，需要进行联合调试，控制延时在1秒以内；
   （未完成）学生端，登录成功之后，需要获取到在线的讲师端LiveID，然后立即启动拉取LiveID的操作；
12.（已完成）服务器，推流端连续发送tagCreate命令之后，会造成LiveID错位，第一个tagCreate命令会自动通知学生端开始拉流，然后回复给推流端，
             但这个命令丢了，造成推流端再次发送tagCreate命令，重建LiveID，造成与之前学生端编号不一致；
   （已完成）服务器，推流端需要将通知学生端可以拉流的命令放在tagHeader当中，而不是tagCreate当中；
   （未完成）服务器，学生观看端发生tagCreate重复创建命令的问题，这个需要深入分析；
   （未完成）服务器，学生观看端拉流时，偶尔会出现一直丢包的问题，总是无法补包完成；
   （不处理）服务器，如果一旦发生5个连续丢包，由于服务器目前的发送丢包方式，会造成在同一毫秒内连续发送这些丢包，造成补充丢包过于频繁，没有任何间隙，
             间接导致服务器无法处理其它事情，造成后续更多的再次连续丢包，需要在每次补包之后给与一定的休整时间，否则就会造成连续的间隙丢包，再也无法恢复过来，
             因为，每次连续丢包都会造成在1毫秒之内快速完成补包，造成服务器无法做其它事情，间接造成服务器堵塞，继续造成连续丢包，这个问题需要参考之前的丢包进行修正；
   （不处理）服务器，改变策略，每次发现丢包立即全部发送，不要等待，因为推流端就是这么操作的，一次性发送打包好的数据包；
   （不处理）服务器，还有一种情况，发现丢包之后，没有立即激发开始发送丢包过程，而是继续等待100毫秒之后才开始；需要在doAddLoseForLooker()这里加入信号量通知；
   （未完成）服务器，这种总是连续丢包的问题，目前看有可能是Smart端的问题，现在的测试环境是讲师端|学生端都在同一个目录下运行的，需要进行调整；
   （未完成）服务器，现在调整为讲师端和学生端进行分离运行，学生端在MacBook上调试运行，然后不但进行推流|停止操作，看看会不会发生连续丢包的问题；
